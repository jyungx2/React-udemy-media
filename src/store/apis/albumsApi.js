import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
// 403. Use this hook to generate some fake text to make a fake ablum title.
import { faker } from "@faker-js/faker";

// ‚úÖ RTK QueryÏùò createApi Ìï®ÏàòÎ•º ÏÇ¨Ïö©Ìï¥ APIÎ•º ÏÉùÏÑ±.
// - Ïó¨Í∏∞ÏÑú APIÎäî Î∞±ÏóîÎìú ÏÑúÎ≤ÑÎ•º ÏÉùÏÑ±ÌïòÎäî Í≤ÉÏù¥ ÏïÑÎãàÎùº, React Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î•º ÏöîÏ≤≠ÌïòÎäî ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∏° ÏΩîÎìúÎ•º ÎßêÌï®.
// - ÏÉùÏÑ±Îêú APIÏóêÎäî Îã§ÏñëÌïú Redux Í∏∞Îä•Ïù¥ Ìè¨Ìï® (Ïä¨ÎùºÏù¥Ïä§(Slice): Î¶¨ÎìÄÏÑú, Ïï°ÏÖò ÏÉùÏÑ±Í∏∞ Ìè¨Ìï® ÎπÑÎèôÍ∏∞ ÏûëÏóÖ Í¥ÄÎ¶¨Ïö© Thunk Ìï®Ïàò)
const albumsApi = createApi({
  // 1Ô∏è‚É£ reducerPath: ReduxÏùò Ï†ÑÏ≤¥ ÏÉÅÌÉú Í∞ùÏ≤¥(useSelectorÏùò Ïù∏ÏûêÎ°ú Î∞õÏïÑÏôÄÏßÄÎäî Ï†ÑÏ≤¥ state Í∞ùÏ≤¥)ÏóêÏÑú ÌäπÏ†ï APIÏôÄ Í¥ÄÎ†®Îêú ÏÉÅÌÉúÎ•º Ï†ÄÏû•Ìï† ÏúÑÏπò(ÌÇ§)Î•º ÏßÄÏ†ïÌïòÎäî Î¨∏ÏûêÏó¥
  reducerPath: "albums",

  // 2Ô∏è‚É£ fetchBaseQuery: fetchÏùò Î™á Í∞ÄÏßÄ Î∂àÌé∏Ìïú Ï†ê(Ïòà: JSON Î≥ÄÌôò, Ïò§Î•ò Ï≤òÎ¶¨)ÏùÑ ÎØ∏Î¶¨ ÏÑ§Ï†ïÌïòÏó¨ Ìé∏Î¶¨ÌïòÍ≤å ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎèÑÎ°ù
  baseQuery: fetchBaseQuery({
    baseUrl: "http://localhost:3005", // where our server is hosted?
  }),
  // 3Ô∏è‚É£ endpoints: Redux Toolkit QueryÏóê Ïñ¥Îñ§ ÏöîÏ≤≠ÏùÑ Ìï†ÏßÄÎ•º Ï†ïÏùòÌïòÎäî Î∂ÄÎ∂Ñ
  endpoints(builder) {
    return {
      addAlbum: builder.mutation({
        // üìù 408.
        // fetchAlbumsÏùò tagÏôÄ Í∞ôÏùÄ Ïù¥Î¶ÑÏùò tagÎ•º Ïç®Ï£ºÏñ¥ addAlbumÏù¥ÎùºÎäî mutationÏù¥ ÏùºÏñ¥ÎÇ¨ÏùÑ Îïå, ÎèôÏùºÌïú ÌÉúÍ∑∏("Album")Î•º invalid(Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå) ÏÉÅÌÉúÎ°ú ÎßåÎì¶ÏúºÎ°úÏç®, fetchAlbumsÎùºÎäî ÏøºÎ¶¨Ìï®ÏàòÎ•º Ïû¨Ïã§ÌñâÌïòÏó¨ ÏóÖÎç∞Ïù¥Ìä∏Îêú Îç∞Ïù¥ÌÑ∞Î°ú ÌôîÎ©¥ÏùÑ Î¶¨Î†åÎçîÎßÅ ÏãúÌÇ¥
        // invalidatesTags: ["Album"],
        // üìù 409.
        // Ïó¨Í∏∞ÏÑú userÎäî AlbumsList.jsÏóêÏÑú handleAddAlbumÌï®Ïàò ÏïàÏùò addAlbum(user)Ïùò Ïù∏ÏûêÍ∞í(=user)ÏùÑ ÎúªÌï®
        // ‚úÖ Ïù¥Ï†ú ÎçîÏù¥ÏÉÅ MyraÏùò Ïï®Î≤îÏùÑ Ï∂îÍ∞ÄÌï† Îïå Îã§Î•∏ Ïú†Ï†ÄÎì§Ïùò Ïï®Î≤î Î¶¨Ïä§Ìä∏ ÎòêÌïú Í∞ôÏù¥ Ï°∞ÌöåÎêòÏßÄ ÏïäÎäîÎã§! (Î¨∏Ï†úÌï¥Í≤∞!)
        invalidatesTags: (result, error, user) => {
          return [{ type: "Album", id: user.id }];
        },
        // * query Fn: this is used for telling RTK Query about some parameters to use for the request.
        query: (user) => {
          return {
            url: "/albums",
            // we don't need any query string params.
            method: "POST",
            body: {
              userId: user.id,
              title: faker.commerce.productName(),
            },
          };
        },
      }),
      // ‚úÖ The goal of this query function is to specify exactly how to make the request!
      // API ÏÉùÏÑ± Ïãú ÏûêÎèôÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠/Ï°∞ÏûëÏö© HookÏù¥ ÎßåÎì§Ïñ¥ÏßÄÍ≥†, Ïù¥Îïå ÌõÖÏùò Ïù¥Î¶ÑÏùÄ endpointsÌï®ÏàòÏùò Î¶¨ÌÑ¥Í∞íÎì§Ïùò keyÍ∞íÎì§Ïù¥ Ìè¨Ìï®ÎêúÎã§.
      // ex) use‚ú®FetchAlbums‚ú®Query: Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Query ÏöîÏ≤≠

      // Tell Redux Toolkit Query how to make a req to "fetch the list of albums".
      fetchAlbums: builder.query({
        // üìù 408.
        // fetchAlbumsÎ•º Ìò∏Ï∂úÌï† Îïå Ìï¥Îãπ ÏöîÏ≤≠ÏùÑ Album ÌÉúÍ∑∏Î°ú ÌëúÏãú => Ïù¥ ÏøºÎ¶¨Î°ú Í∞ÄÏ†∏Ïò® Îç∞Ïù¥ÌÑ∞Îäî "Album"Ïù¥ÎùºÎäî ÌÉúÍ∑∏Î°ú ÌëúÏãú...
        // ÌÉúÍ∑∏Îäî Îç∞Ïù¥ÌÑ∞Î•º ÏãùÎ≥ÑÌïòÍ≥†, ÌäπÏ†ï Îç∞Ïù¥ÌÑ∞Î•º Ïû¨Ï°∞Ìöå(refetch)Ìï† ÌïÑÏöîÍ∞Ä ÏûàÏùÑ Îïå ÌôúÏö©.. Ï¶â, ÌÉúÍ∑∏Îäî "Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî"Î•º ÏúÑÌïú ‚ú®Í∏∞Ï§ÄÏ†ê‚ú®ÏúºÎ°ú ÏÇ¨Ïö©!
        // ÌÉúÍ∑∏ Ïù¥Î¶ÑÏùÄ ÏûêÏú†Î°≠Í≤å ÏÑ§Ï†ï Í∞ÄÎä•, ÏùºÎ∞òÏ†ÅÏúºÎ°ú Î¶¨ÏÜåÏä§Ïùò Ïù¥Î¶ÑÍ≥º Í¥ÄÎ†®Îêú Í∞ÑÎã®Ìïú Î¨∏ÏûêÏó¥Î°ú ÏÑ§Ï†ï..('Album', 'User', 'Post' Îì±..)
        // Îã®, Í∞ôÏùÄ ÌÉúÍ∑∏ Ïù¥Î¶ÑÏùÑ ÏÇ¨Ïö©ÌïòÎäî ÏøºÎ¶¨ÏôÄ ÎÆ§ÌÖåÏù¥ÏÖò Í∞ÑÏóêÎßå ÎèôÏûëÏù¥ Ïó∞Í≤∞ÎêòÍ∏∞ ÎïåÎ¨∏Ïóê, ÎÆ§ÌÖåÏù¥ÏÖò Î∞úÏÉùÏãú, ÌäπÏ†ï ÏøºÎ¶¨Ïùò Îç∞Ïù¥ÌÑ∞Î•º Î¨¥Ìö®ÌôîÏãúÏºú ÏóÖÎç∞Ïù¥Ìä∏Îêú ÏµúÏã† Îç∞Ïù¥ÌÑ∞Î°ú Í∞±Ïã†ÌïòÍ≥† Ïã∂ÏúºÎ©¥, Í∞ôÏùÄ ÎÑ§ÏûÑÏùò ÌÇ§Î•º Ïç®Ï§òÏïº ÌïúÎã§!
        // ex) ÏÉàÎ°úÏö¥ Ïï®Î≤îÏùÑ Ï∂îÍ∞ÄÌïòÎäî AddAlbum ÎÆ§ÌÖåÏù¥ÏÖòÏóêÏÑú, invalidatesTags: ["Album"]ÏùÑ ÏÑ§Ï†ïÌïòÎ©¥, Ìï¥Îãπ ÌÉúÍ∑∏Î°ú ÌëúÏãúÎêú ÏøºÎ¶¨(fetchAlbums)Í∞Ä "Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå"(stale, not fresh)ÏúºÎ°ú ÌëúÏãúÎêòÍ≥† ÏûêÎèôÏúºÎ°ú Ïû¨Ïã§Ìñâ

        // 1Ô∏è‚É£ Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå (Invalidated): ÌäπÏ†ï ÌÉúÍ∑∏ÏôÄ Ïó∞Í≤∞Îêú ÏøºÎ¶¨Í∞Ä Îçî Ïù¥ÏÉÅ Ïã†Î¢∞Ìï† Ïàò ÏóÜÎäî ÏÉÅÌÉúÏûÑÏùÑ ÌëúÏãú.
        // 2Ô∏è‚É£ stale (Íµ¨Ïãù): Îç∞Ïù¥ÌÑ∞Î•º Îã§Ïãú Í∞ÄÏ†∏ÏôÄÏïº Ìï† ÌïÑÏöîÏÑ±ÏùÑ ÏùòÎØ∏.
        // => Ïù¥ Îëê ÌëúÌòÑÏùÄ Ïã§ÏßàÏ†ÅÏúºÎ°ú Í∞ôÏùÄ ÏùòÎØ∏Î°ú ÏÇ¨Ïö©Îê©ÎãàÎã§.
        // providesTags: ["Album"],

        // üìù 409.
        // üö® Í∏∞Ï°¥ ÌÉúÍ∑∏(['Album'])Ïùò Î¨∏Ï†úÏ†ê: ÏÇ¨Ïö©Ïûê "Myra"Ïùò Ïï®Î≤î Ï∂îÍ∞Ä ‚Üí "Myra"ÎøêÎßå ÏïÑÎãàÎùº "Elsie"ÏôÄ "Harold"Ïùò Ïï®Î≤î Îç∞Ïù¥ÌÑ∞ÎèÑ Ïû¨Ï°∞Ìöå.
        // >>> MyraÏùò Îç∞Ïù¥ÌÑ∞Îßå Î≥ÄÍ≤ΩÎêòÏóàÏúºÎÇò, "Album" ÌÉúÍ∑∏Î•º Í∞ÄÏßÑ Î™®Îì† ÏÇ¨Ïö©ÏûêÏùò Îç∞Ïù¥ÌÑ∞Í∞Ä ÎèôÏãúÏóê Ïû¨Ï°∞ÌöåÎê®.
        // üëâ Î™®Îì† ÏÇ¨Ïö©ÏûêÏùò Îç∞Ïù¥ÌÑ∞Î•º ÎèôÏùºÌïú ÌÉúÍ∑∏(Album)Î°ú Í¥ÄÎ¶¨ÌïòÎäî Í≤ÉÏù¥ ÏïÑÎãå, ÌäπÏ†ï ÏÇ¨Ïö©ÏûêÏóêÍ≤åÎßå ÏòÅÌñ•ÏùÑ Ï£ºÎäî Î∞©ÏãùÏúºÎ°ú ÌÉúÍ∑∏Î•º ÏÑ§Ï†ïÌï† ÌïÑÏöî (ÌÉúÍ∑∏Ïùò ÏÑ§Ï†ïÎ≤îÏúÑÎ•º Ï¢ÅÌûàÏûê!!)
        // ÌäπÏ†ï ÏÇ¨Ïö©ÏûêÏóêÍ≤åÎßå ÏøºÎ¶¨Ìï®ÏàòÎ•º Ï†ÅÏö©ÏãúÌÇ§Í∏∞ ÏúÑÌï¥ Í≥†Ïú†Ìïú userÏùò idÍ∞íÏùÑ ÌÉúÍ∑∏Ïóê Ìè¨Ìï®ÏãúÏºú Í∞ùÏ≤¥ÌòïÌÉúÎ°ú ÌÉúÍ∑∏Î•º Ï∂îÍ∞ÄÌïòÏûê...
        // Ïù¥Îïå userÎäî providesTagsÎ•º Ìï®ÏàòÌòïÌÉúÎ°ú Î∂àÎü¨Ïò¨ Îïå, ÏûêÎèôÏúºÎ°ú Î∞õÎäî 3Í∞ÄÏßÄ Ïù∏Ïûê(result, error, user(arg))Ïóê Ìè¨Ìï®ÎêòÏñ¥ ÏûàÍ∏∞ ÎïåÎ¨∏Ïóê ÏÇ¨Ïö©Í∞ÄÎä•! Ïù¥Îïå userÎäî useFetchAlbumsQuery()ÎùºÎäî ÌõÖÏóê Ï†ÑÎã¨Ìïú Ïù∏ÏûêÍ∞í(= {id: 1, name: 'Myra'})ÏùÑ ÏßÄÏπ≠.
        providesTags: (result, error, user) => {
          return [{ type: "Album", id: user.id }];
        },
        query: (user) => {
          return {
            url: "/albums",
            params: {
              userId: user.id,
            },
            method: "GET",
          };
        },
      }),
    };
  },
});

export const { useFetchAlbumsQuery, useAddAlbumMutation } = albumsApi;
export { albumsApi };

// üìù Creating a RTK Query API
// 1. Identify a group of related requests that your app needs to make.
// 2. Make a new file that will create the api.
// 3. The API needs to stroe a ton of state related to data, request, status, errors. Add a 'reducerPath'
// 4. The API needs to know how and where to send requests. Add a 'baseQuery'.
// 5. Add 'endpoints', one for each kind of request you want to make. Reqs that read data are queries, write data are mutations.
// 6. Export all of the automatically generated hooks.
// 7. Connect the API to the store. Reducer, middleware, and listeners.
// 8. Export the hooks from store/index.js file.
