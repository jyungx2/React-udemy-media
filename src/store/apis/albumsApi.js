import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
// 403. Use this hook to generate some fake text to make a fake ablum title.
import { faker } from "@faker-js/faker";

// ‚úÖ RTK QueryÏùò createApi Ìï®ÏàòÎ•º ÏÇ¨Ïö©Ìï¥ APIÎ•º ÏÉùÏÑ±.
// - Ïó¨Í∏∞ÏÑú APIÎäî Î∞±ÏóîÎìú ÏÑúÎ≤ÑÎ•º ÏÉùÏÑ±ÌïòÎäî Í≤ÉÏù¥ ÏïÑÎãàÎùº, React Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î•º ÏöîÏ≤≠ÌïòÎäî ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∏° ÏΩîÎìúÎ•º ÎßêÌï®.
// - ÏÉùÏÑ±Îêú APIÏóêÎäî Îã§ÏñëÌïú Redux Í∏∞Îä•Ïù¥ Ìè¨Ìï® (Ïä¨ÎùºÏù¥Ïä§(Slice): Î¶¨ÎìÄÏÑú, Ïï°ÏÖò ÏÉùÏÑ±Í∏∞ Ìè¨Ìï® ÎπÑÎèôÍ∏∞ ÏûëÏóÖ Í¥ÄÎ¶¨Ïö© Thunk Ìï®Ïàò)
const albumsApi = createApi({
  // 1Ô∏è‚É£ reducerPath: ReduxÏùò Ï†ÑÏ≤¥ ÏÉÅÌÉú Í∞ùÏ≤¥(useSelectorÏùò Ïù∏ÏûêÎ°ú Î∞õÏïÑÏôÄÏßÄÎäî Ï†ÑÏ≤¥ state Í∞ùÏ≤¥)ÏóêÏÑú ÌäπÏ†ï APIÏôÄ Í¥ÄÎ†®Îêú ÏÉÅÌÉúÎ•º Ï†ÄÏû•Ìï† ÏúÑÏπò(ÌÇ§)Î•º ÏßÄÏ†ïÌïòÎäî Î¨∏ÏûêÏó¥
  reducerPath: "albums",

  // 2Ô∏è‚É£ fetchBaseQuery: fetchÏùò Î™á Í∞ÄÏßÄ Î∂àÌé∏Ìïú Ï†ê(Ïòà: JSON Î≥ÄÌôò, Ïò§Î•ò Ï≤òÎ¶¨)ÏùÑ ÎØ∏Î¶¨ ÏÑ§Ï†ïÌïòÏó¨ Ìé∏Î¶¨ÌïòÍ≤å ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎèÑÎ°ù
  baseQuery: fetchBaseQuery({
    baseUrl: "http://localhost:3005", // where our server is hosted?
  }),
  // 3Ô∏è‚É£ endpoints: Redux Toolkit QueryÏóê Ïñ¥Îñ§ ÏöîÏ≤≠ÏùÑ Ìï†ÏßÄÎ•º Ï†ïÏùòÌïòÎäî Î∂ÄÎ∂Ñ
  endpoints(builder) {
    return {
      addAlbum: builder.mutation({
        // *query Fn: this is used for telling RTK Query about some parameters to use for the request.
        query: (user) => {
          return {
            url: "/albums",
            // we don't need any query string params.
            method: "POST",
            body: {
              userId: user.id,
              title: faker.commerce.productName(),
            },
          };
        },
      }),
      // ‚úÖ The goal of this query function is to specify exactly how to make the request!
      // API ÏÉùÏÑ± Ïãú ÏûêÎèôÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠/Ï°∞ÏûëÏö© HookÏù¥ ÎßåÎì§Ïñ¥ÏßÄÍ≥†, Ïù¥Îïå ÌõÖÏùò Ïù¥Î¶ÑÏùÄ endpointsÌï®ÏàòÏùò Î¶¨ÌÑ¥Í∞íÎì§Ïùò keyÍ∞íÎì§Ïù¥ Ìè¨Ìï®ÎêúÎã§.
      // ex) use‚ú®FetchAlbums‚ú®Query: Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Query ÏöîÏ≤≠

      // Tell Redux Toolkit Query how to make a req to "fetch the list of albums".
      fetchAlbums: builder.query({
        query: (user) => {
          return {
            url: "/albums",
            params: {
              userId: user.id,
            },
            method: "GET",
          };
        },
      }),
    };
  },
});

export const { useFetchAlbumsQuery, useAddAlbumMutation } = albumsApi;
export { albumsApi };

// üìù Creating a RTK Query API
// 1. Identify a group of related requests that your app needs to make.
// 2. Make a new file that will create the api.
// 3. The API needs to stroe a ton of state related to data, request, status, errors. Add a 'reducerPath'
// 4. The API needs to know how and where to send requests. Add a 'baseQuery'.
// 5. Add 'endpoints', one for each kind of request you want to make. Reqs that read data are queries, write data are mutations.
// 6. Export all of the automatically generated hooks.
// 7. Connect the API to the store. Reducer, middleware, and listeners.
// 8. Export the hooks from store/index.js file.
